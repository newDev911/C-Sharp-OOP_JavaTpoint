

Exception Handling is a process to handle runtime errors.

We perform "Exception Handling" so that the normal flow of application can be maintained
even after runtime errors.

In C#, exception is an "event" or "object" which is thrown at runtime.

All Exception are derived from "System.Exception" class

If we don't handle the Exception, it will print the "Exception Error" and terminates the program.


----------------------------------
C# EXCEPTION CLASSES:
	1: System.DividedByZeroException:
		handles the error generated by dividing a number with zero

	2: System.NullReferenceException:
		handles the error generated by referencing a null object

	3: System.InvalidCastException:
		handles the error generated by invalid typecasting

	4: System.IO.IOException:
		handles the Input Output errors

	5: System.FieldAccessException:
		handles the error generated by invalid "private" or "protected" field access

------------------------------------
C# EXCEPTION HANDLING KEYWORDS:
	
	. try
	. catch
	. finally
	. throw

** We can also create user-definded exceptions
